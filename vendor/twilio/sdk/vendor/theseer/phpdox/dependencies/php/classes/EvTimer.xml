<?xml version="1.0" encoding="UTF-8" ?>
<class xmlns="http://xml.phpdox.net/src" full="EvTimer" namespace="" name="EvTimer">
  <extends name="EvWatcher" full="EvWatcher"/>
  <member name="repeat" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="If repeat is 0.0 , then it will automatically be stopped once the timeout is reached. If it is positive, then the timer will automatically be configured to trigger again every repeat seconds later, until stopped manually."/>
    </docblock>
  </member>
  <member name="remaining" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="Returns the remaining time until a timer fires. If the timer is active, then this time is relative to the current event loop time, otherwise it's the timeout value currently configured.">Returns the remaining time until a timer fires. If the timer is active, then this time is relative to the current event loop time, otherwise it's the timeout value currently configured.</description>
    </docblock>
  </member>
  <member name="is_active" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="Readonly . TRUE if the watcher is active. FALSE otherwise."/>
    </docblock>
  </member>
  <member name="data" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="User custom data associated with the watcher"/>
    </docblock>
  </member>
  <member name="is_pending" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="Readonly .TRUE if the watcher is pending, i.e. it has outstanding events, but its callback has not yet been invoked. FALSE otherwise. As long, as a watcher is pending(but not active), one must not change its priority."/>
    </docblock>
  </member>
  <member name="priority" static="false" visibility="public">
    <default>null</default>
    <docblock>
      <description compact="Integer between Ev::MINPRI and Ev::MAXPRI . Pending watchers with higher priority will be invoked before watchers with lower priority, but priority will not keep watchers from being executed(except for EvIdle watchers). EvIdle watchers provide functionality to suppress invocation when higher priority events are pending."/>
    </docblock>
  </member>
  <method name="again" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Restarts the timer watcher">This will act as if the timer timed out and restart it again if it is repeating. The exact semantics are:</description>
      <return type="void"/>
    </docblock>
  </method>
  <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Constructs an EvTimer watcher object"/>
      <return type="void"/>
    </docblock>
    <parameter name="after" optional="false" byreference="false" type="object" class="float"/>
    <parameter name="repeat" optional="false" byreference="false" type="object" class="float"/>
    <parameter name="callback" optional="false" byreference="false" type="object" class="callable"/>
    <parameter name="data" optional="true" byreference="false" type="object" class="mixed"/>
    <parameter name="priority" optional="true" byreference="false" type="int"/>
  </constructor>
  <method name="createStopped" abstract="false" static="false" visibility="public" final="true">
    <docblock>
      <description compact="Creates EvTimer stopped watcher object"/>
      <return type="EvTimer"/>
    </docblock>
    <parameter name="after" optional="false" byreference="false" type="object" class="float"/>
    <parameter name="repeat" optional="false" byreference="false" type="object" class="float"/>
    <parameter name="callback" optional="false" byreference="false" type="object" class="callable"/>
    <parameter name="data" optional="true" byreference="false" type="object" class="mixed"/>
    <parameter name="priority" optional="true" byreference="false" type="int"/>
  </method>
  <method name="set" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact="Configures the watcher"/>
      <return type="void"/>
    </docblock>
    <parameter name="after" optional="false" byreference="false" type="object" class="float"/>
    <parameter name="repeat" optional="false" byreference="false" type="object" class="float"/>
  </method>
  <method name="clear" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="int"/>
    </docblock>
  </method>
  <constructor name="__construct" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
  </constructor>
  <method name="feed" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
    <parameter name="revents" optional="false" byreference="false" type="int"/>
  </method>
  <method name="getLoop" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="EvLoop"/>
    </docblock>
  </method>
  <method name="invoke" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
    <parameter name="revents" optional="false" byreference="false" type="int"/>
  </method>
  <method name="keepalive" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="bool"/>
    </docblock>
    <parameter name="value" optional="true" byreference="false" type="object" class="bool"/>
  </method>
  <method name="setCallback" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
    <parameter name="callback" optional="false" byreference="false" type="object" class="callable"/>
  </method>
  <method name="start" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
  </method>
  <method name="stop" abstract="false" static="false" visibility="public" final="false">
    <docblock>
      <description compact=""/>
      <return type="void"/>
    </docblock>
  </method>
</class>